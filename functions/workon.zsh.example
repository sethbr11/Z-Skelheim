#!/bin/zsh

function workon() {
    local OPEN_CODE=true RUN_PROJECT=false USE_BASE=false NO_ENV=false RUN_DEFAULT=""
    local PROJECT_NAME="" SUBFOLDER_NAME="" PROJECT_FOLDER=""
    local ENV_PATH="" FOLDER_PATH="" APP_PATH="" RUN_COMMAND=""

    # Check if Accessibility permissions are enabled
    check_accessibility_permissions || return 1

    # Display the help menu if --help is passed
    if [[ "$1" == "--help" ]]; then
        echo "
Usage: workon {project_name|subfolder {subfolder_name} [project_folder]} [options]

Description:
  Quickly switch to a project directory, optionally open it in VS Code,
  activate environments, or run the project.

Supported Projects:
  - example: Example App (Python)
  - zsh: Edit ZSH configuration files

Options:
  -c    Close VS Code (don't open the project in VS Code)
  -r    Run the project with its associated command
  -b    Open the base project folder in VS Code instead of subfolder (if applicable)
  -d    Skip activating any environment (e.g., virtualenv)
  -rd={env_name} Activate a default environment (e.g., python)

Examples:
  workon example -c -r
  workon example -d -b
  workon subfolder MySubfolder
  workon subfolder MySubfolder Project1 -d
  workon zsh

Notes:
  - If the specified project requires Docker, the necessary containers will be started automatically.
  - When working on projects with subfolders, specify the subfolder name and optionally a project folder.
  - Default environments can be configured for specific languages or tools.
  - The 'zsh' project will also open your .zshrc file for editing.
"
        return 0
    fi

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -c) OPEN_CODE=false ;;
            -r) RUN_PROJECT=true ;;
            -b) USE_BASE=true ;;
            -d) NO_ENV=true ;;
            -rd=*) RUN_DEFAULT="${1#*=}" ;;
            *)
                if [[ -z "$PROJECT_NAME" ]]; then
                    PROJECT_NAME="$1"
                elif [[ -z "$SUBFOLDER_NAME" ]]; then
                    SUBFOLDER_NAME="$1"
                elif [[ -z "$PROJECT_FOLDER" ]]; then
                    PROJECT_FOLDER="$1"
                else
                    echo "Too many arguments."
                    return 1
                fi
                ;;
        esac
        shift
    done

    # Define default environments
    declare -A DEFAULT_ENVIRONMENTS=(
        ["python"]="$HOME/Workspace/.env"
    )

    # Activate default environment if specified
    if [[ -n "$RUN_DEFAULT" ]]; then
        local DEFAULT_ENV_PATH="${DEFAULT_ENVIRONMENTS[$RUN_DEFAULT]}"
        if [[ -n "$DEFAULT_ENV_PATH" && -d "$DEFAULT_ENV_PATH" ]]; then
            echo "> Activating default environment for $RUN_DEFAULT: $DEFAULT_ENV_PATH"
            source "$DEFAULT_ENV_PATH/bin/activate"
        else
            echo "Error: Default environment for $RUN_DEFAULT not found or invalid."
            return 1
        fi
    fi

    # Define project-specific configurations
    declare -A PROJECTS=(
        ["example"]="$HOME/Workspace/Example|app|source \"$HOME/Workspace/Example/env/bin/activate\" && cd example && python manage.py runserver 0.0.0.0:8000"
        ["zsh"]="$HOME/.zsh/||echo 'No run command specified for zsh.'"
    )

    # Handle generic subfolder logic
    if [[ "$PROJECT_NAME" == "subfolder" && -n "$SUBFOLDER_NAME" ]]; then
        FOLDER_PATH="$HOME/Projects/$SUBFOLDER_NAME/"
        ENV_PATH="$FOLDER_PATH/venv"
        [[ -n "$PROJECT_FOLDER" ]] && FOLDER_PATH="$FOLDER_PATH$PROJECT_FOLDER"
        RUN_COMMAND="echo 'No run command specified for $SUBFOLDER_NAME.'"
    elif [[ -n "${PROJECTS[$PROJECT_NAME]}" ]]; then
        IFS="|" read -r FOLDER_PATH APP_PATH RUN_COMMAND <<<"${PROJECTS[$PROJECT_NAME]}"
    else
        echo "Usage: workon {example|zsh|subfolder {subfolder_name} [project_folder]} [-c] [-r] [-b] [-d] [-rd={env_name}]"
        return 1
    fi

    # Activate Python environment if needed
    if [[ -n "$ENV_PATH" && "$NO_ENV" == false && -d "$ENV_PATH" ]]; then
        echo "> Activating Python environment: $ENV_PATH"
        source "$ENV_PATH/bin/activate"
    fi

    # Navigate to project folder
    if [[ -n "$FOLDER_PATH" && -d "$FOLDER_PATH" ]]; then
        cd "$FOLDER_PATH" || return 1

        # Run project if the -r flag is set
        if [[ "$RUN_PROJECT" == true && -n "$RUN_COMMAND" ]]; then
            echo "> Running command: $RUN_COMMAND"

            # Check if the RUN_COMMAND requires Docker
            if [[ "$RUN_COMMAND" == *"docker"* ]]; then
                # Docker_start function in functions/open_docker.zsh
                docker_start -h
            fi

            # Open a new terminal tab
            osascript -e "tell application \"Terminal\" to activate"
            sleep 0.25
            osascript -e "tell application \"System Events\" to keystroke \"t\" using {command down}"
            sleep 0.5

            # Change the directory
            osascript -e "
                tell application \"Terminal\"
                    do script \"cd $FOLDER_PATH\" in selected tab of window 1
                end tell
            " > /dev/null 2>&1

            # Split and execute commands in the new terminal tab
            IFS='&&'
            for CMD in $RUN_COMMAND; do
                CMD=$(echo "$CMD" | xargs)  # Trim whitespace
                osascript -e "
                    tell application \"Terminal\"
                        do script \"$CMD\" in selected tab of window 1
                    end tell
                " > /dev/null 2>&1
                sleep 1
            done
            unset IFS

            # Wait before returning focus
            sleep 1
            osascript -e "tell application \"System Events\" to keystroke \"1\" using {command down}"
        fi

        # Open the folder in VS Code
        if [[ "$OPEN_CODE" == true ]]; then
            local CODE_PATH="$FOLDER_PATH"
            [[ "$USE_BASE" == false && -n "$APP_PATH" ]] && CODE_PATH="$FOLDER_PATH/$APP_PATH"
            CODE_PATH="${CODE_PATH%/}" # Remove trailing slash if any
            echo "> Opening in VS Code: $CODE_PATH"
            code "$CODE_PATH"
        fi
    else
        echo "Error: Directory not found: $FOLDER_PATH"
        return 1
    fi

    # Special logic for "zsh" - open the ZSH configuration file in addition to the project folder
    if [[ "$PROJECT_NAME" == "zsh" ]]; then
        code "$HOME/.zshrc"
    fi
}